#!groovy
pipeline {
    agent {
        docker {
            image 'hseeberger/scala-sbt:8u242_1.3.8_2.12.10'
            args "-v $JENKINS_HOME/.sbt/.credentials:/mnt/JENKINS_HOME/.sbt/.credentials"
//            label 'COMMERCIAL_GENERAL_PURPOSE'
        }
    }
    options {
        buildDiscarder(logRotator(daysToKeepStr: '1',numToKeepStr: '5'))
        ansiColor('xterm')
        disableConcurrentBuilds()
        timeout(time: 180, unit: 'MINUTES')
        timestamps()
    }
    environment {
	def CI_PROPERTIES = readProperties interpolate: true, file: '.ci/ci.properties'
        // PROJECT
        PROJECT_NAME = "${JOB_NAME.split('/')[0]}"
        CURRENT_VERSION = readFile("${env.WORKSPACE}/version.sbt").split(":=")[1].replace("\"","").trim()
        //DEFAULT_SCALA_VERSION = sh(script:"sbt -Dsbt.log.noformat=true $SBT_OPTIONS \"show scalaBinaryVersion\" | tail -1 | awk '{print \$(NF)}' | tr -d '\n'", returnStdout: true)
        DEFAULT_SCALA_VERSION = CI_PROPERTIES.get('DEFAULT_SCALA_VERSION')
        
        // SLACK
        SLACK_CHANEL_TO_NOTIFY = "#ci-journal" 
        PERSON_TO_NOTIFY= "<@UKG2DBS23>" // Jorge Galveias Slack ID
        
        // TESTS
        UNIT_TESTS_FOUND = sh(script: " sbt $SBT_OPTIONS \"show test:definedTests\"", returnStdout: true).contains("Test")
        IT_TESTS_FOUND = sh(script: " find ${env.WORKSPACE} -name 'it' ", returnStdout: true).contains("it")
        
        // GIT 
        CUSTOM_BRANCH_BANE = "${BRANCH_NAME}".replace('/','-')
        SHORT_GIT_COMMIT_SHA = sh(script: "git rev-parse --short ${env.GIT_COMMIT}", returnStdout: true).replace("\n","").trim()
        
        // SBT 
        SBT_VERSION = "1.3.8"
        SBT_OPTIONS = "-Dsbt.version=${SBT_VERSION} -Dsbt.ci=true -Dsbt.global.base=.sbt -Dsbt.boot.directory=.sbt -Dsbt.ivy.home=.ivy2 -Dsbt.coursier.home=.coursier"
        SBT_CREDENTIALS="$JENKINS_HOME/.sbt/.credentials" 
        // JENKINS       
        CI_JOB_NAME = "${JOB_NAME.split('/')[0]}"
        
        // SNAPSHOT_RELEASE 
        SNAPSHOT_VERSION_TO_RELEASE = "${SHORT_GIT_COMMIT_SHA}-${CURRENT_VERSION}"
        
    }
    stages {
        // Unit Tests are MANDATORY
        stage('Update'){
          steps{
            sh "sbt $SBT_OPTIONS update"
          }
        }
        stage('Unit Tests Not Found'){
          when { expression { UNIT_TESTS_FOUND == 'false' } }
          steps {
            script {
	      currentBuild.description="No Unit Tests found  and they are MANDATORY"
            }
            error("No Unit Tests run and they are MANDATORY")
          }
        }
        stage('Unit Tests') {
            steps {
              retry(3){
                sh "sbt $SBT_OPTIONS  coverage +test"
              }
            }
        }
        stage('Integration Tests') {
        // Integration Tests are OPTIONAL
         when { expression { IT_TESTS_FOUND == 'true' } }
            steps{
                sh "sbt $SBT_OPTIONS coverage +it:test"
            }
        }
        stage('Compute Code Coverage') {
            steps {
                sh "sbt ${SBT_OPTIONS} coverageReport"
                sh "sbt ${SBT_OPTIONS} coverageAggregate"
            }
        }
        stage('Sonarqube Analysis'){
            steps {
                withSonarQubeEnv(installationName:'carpe_sonarqube_server') {
                    sh "sbt ${SBT_OPTIONS} -Dsonar.projectKey=carpe_${PROJECT_NAME} -Dsonar.organization=carpe -Dsonar.branch.name=${env.BRANCH_NAME} -Dsonar.verbose=true -Dsonar.login=${SONAR_AUTH_TOKEN} sonarScan "
                }
            }
        }
        stage('Snapshot Release'){
            when { 
                not {
                    anyOf { 
                      branch 'master'; 
                      branch 'develop' 
                    } 
                }
            }
            steps{
                sh "sbt ${SBT_OPTIONS} \"set version in ThisBuild := \\\"${SNAPSHOT_VERSION_TO_RELEASE}\\\" \" \"+publish\" "
                sh "echo \\\"${PROJECT_NAME}-${SNAPSHOT_VERSION_TO_RELEASE}\\\" > snapshotVersionReleased.html"
                script{
                    currentBuild.description = "Released Version : ${SNAPSHOT_VERSION_TO_RELEASE}"
                }
            }
        }
    }
    post {
        always {
            junit 'target/test-reports/*.xml'
            archiveArtifacts artifacts: "target/scala-${DEFAULT_SCALA_VERSION}/scoverage-report/**"
            archiveArtifacts artifacts: 'target/test-reports/**'
            step([$class: 'ScoveragePublisher', reportDir: "target/scala-${DEFAULT_SCALA_VERSION}/scoverage-report", reportFile: 'scoverage.xml'])
        }
        failure{
          script {
            if (env.BRANCH_NAME == 'develop'){
              slackSend(channel: "${SLACK_CHANEL_TO_NOTIFY}", color: '#FF4500',message:"*Project*: `${CI_JOB_NAME}` \n*Branch*: ${env.BRANCH_NAME} \n *Commit*: ${env.GIT_COMMIT} \n *Status*: ${currentBuild.currentResult} \n *JOB URL*: ${env.BUILD_URL} \n Notifying: ${PERSON_TO_NOTIFY}")
            }
          }
        }
        cleanup {
          cleanWs()
        }
   }
}

