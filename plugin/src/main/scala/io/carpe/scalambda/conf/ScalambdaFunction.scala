package io.carpe.scalambda.conf

import io.carpe.scalambda.conf.function.{ApiGatewayConf, FunctionConf, FunctionRoleSource}
import io.carpe.scalambda.conf.utils.StringUtils
import io.carpe.scalambda.terraform.ast.resources.S3Bucket

case class ScalambdaFunction(functionName: String,
                             handlerPath: String,
                             iamRole: FunctionRoleSource,
                             functionConfig: FunctionConf,
                             apiConfig: Option[ApiGatewayConf],
                             s3BucketName: String
                            ) {

  /**
   * This will be the name of the terraform lambda resource generated by the "scalambdaTerraform" task.
   */
  lazy val terraformLambdaResourceName: String = ScalambdaFunction.terraformLambdaResourceName(functionName)

  /**
   * Create a variable in the outputted yaml that the terraform will inject the actual arn into once the lambda has
   * been created.
   *
   * This makes sure that our swagger file uses the proper lambda invocation ARN.
   */
  lazy val swaggerVariableName: String = {
    """${""" + terraformLambdaResourceName  + """_invoke_arn}"""
  }

  /**
   * This will be the name of the terraform resource representing the s3 bucket this lambda's code is stored in
   */
  lazy val terraformS3BucketResourceName: String = {
    S3Bucket(s3BucketName).name
  }

  /**
   * This will be the name of the terraform resource representing the s3 bucket item that is the lambda's code
   */
  lazy val terraformS3BucketItemResourceName: String = {
    StringUtils.toSnakeCase(functionName)
  }

}

object ScalambdaFunction {


  /**
   * The name that of the lambda_function resource that will be used for a given FunctionName.
   * @param functionName to infer a resource name from
   * @return the resource name
   */
  def terraformLambdaResourceName(functionName: String): String = {
    val snakeCaseFunctionName = StringUtils.toSnakeCase(functionName)
    s"${snakeCaseFunctionName}_lambda"
  }
}